// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`testing RootContainer snapshot RootContainer 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(RootContainer)>
    <RootContainer
      chooseUser={[Function]}
      clientConnect={[Function]}
      currentChat={Object {}}
      currentUser={Object {}}
      fetchAllUsers={[Function]}
      registerClient={[Function]}
      users={Array []}
    >
      <ModalLogin
        modalOpen={true}
        registerClient={[Function]}
        users={Array []}
      >
        <Modal
          centered={true}
          closeOnDimmerClick={true}
          closeOnDocumentClick={false}
          dimmer={true}
          eventPool="Modal"
          open={true}
        >
          <Portal
            closeOnDocumentClick={false}
            closeOnEscape={true}
            eventPool="Modal"
            mountNode={
              <body
                class="dimmable dimmed"
              >
                <div
                  class="ui page modals dimmer transition visible active"
                  style="display: flex;"
                >
                  <div
                    class="ui modal transition visible active"
                  >
                    <div
                      class="header"
                    >
                      Choice a character
                    </div>
                    <div
                      class="content"
                    >
                      <div
                        class="ui vertically divided five column grid"
                      >
                        <div
                          class="row"
                        />
                      </div>
                    </div>
                  </div>
                </div>
                <div
                  class="ui page modals dimmer transition visible active"
                  style="display: flex;"
                >
                  <div
                    class="ui modal transition visible active"
                  >
                    <div
                      class="header"
                    >
                      Choice a character
                    </div>
                    <div
                      class="content"
                    >
                      <div
                        class="ui vertically divided five column grid"
                      >
                        <div
                          class="row"
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </body>
            }
            onClose={[Function]}
            onMount={[Function]}
            onOpen={[Function]}
            onUnmount={[Function]}
            open={true}
            openOnTriggerClick={true}
          >
            <PortalInner
              key="inner"
              mountNode={
                <body
                  class="dimmable dimmed"
                >
                  <div
                    class="ui page modals dimmer transition visible active"
                    style="display: flex;"
                  >
                    <div
                      class="ui modal transition visible active"
                    >
                      <div
                        class="header"
                      >
                        Choice a character
                      </div>
                      <div
                        class="content"
                      >
                        <div
                          class="ui vertically divided five column grid"
                        >
                          <div
                            class="row"
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                  <div
                    class="ui page modals dimmer transition visible active"
                    style="display: flex;"
                  >
                    <div
                      class="ui modal transition visible active"
                    >
                      <div
                        class="header"
                      >
                        Choice a character
                      </div>
                      <div
                        class="content"
                      >
                        <div
                          class="ui vertically divided five column grid"
                        >
                          <div
                            class="row"
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                </body>
              }
              onMount={[Function]}
              onUnmount={[Function]}
            >
              <Ref
                innerRef={[Function]}
              >
                <div
                  className="ui page modals dimmer transition visible active"
                >
                  <Ref
                    innerRef={[Function]}
                  >
                    <div
                      className="ui modal transition visible active"
                      style={
                        Object {
                          "marginTop": null,
                        }
                      }
                    >
                      <MountNode
                        className="dimmable dimmed"
                      />
                      <ModalHeader>
                        <div
                          className="header"
                        >
                          Choice a character
                        </div>
                      </ModalHeader>
                      <ModalContent>
                        <div
                          className="content"
                        >
                          <Grid
                            columns="five"
                            divided="vertically"
                          >
                            <div
                              className="ui vertically divided five column grid"
                            >
                              <GridRow>
                                <div
                                  className="row"
                                />
                              </GridRow>
                            </div>
                          </Grid>
                        </div>
                      </ModalContent>
                    </div>
                  </Ref>
                </div>
              </Ref>
            </PortalInner>
          </Portal>
        </Modal>
      </ModalLogin>
    </RootContainer>
  </Connect(RootContainer)>
</Provider>
`;

exports[`testing RootContainer snapshot RootContainer with user 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(RootContainer)>
    <RootContainer
      chooseUser={[Function]}
      clientConnect={[Function]}
      currentChat={Object {}}
      currentUser={
        Object {
          "avatar": "test",
          "id": 1,
          "name": "test",
          "status": "offline",
        }
      }
      fetchAllUsers={[Function]}
      registerClient={[Function]}
      users={Array []}
    >
      <styled.div
        className=""
      >
        <div
          className="sc-bdVaJa kOPfQt"
        >
          <SectionContacts>
            <styled.section>
              <section
                className="sc-bwzfXH kvRyKt"
              >
                <Connect(UserInfoContainers)>
                  <UserInfoContainers
                    changeUserStatus={[Function]}
                    user={
                      Object {
                        "avatar": "test",
                        "id": 1,
                        "name": "test",
                        "status": "offline",
                      }
                    }
                  >
                    <UserInfo
                      changeUserStatus={[Function]}
                      user={
                        Object {
                          "avatar": "test",
                          "id": 1,
                          "name": "test",
                          "status": "offline",
                        }
                      }
                    >
                      <styled.div>
                        <div
                          className="sc-bxivhb vHrVv"
                        >
                          <Styled(Image)
                            bordersize="4px"
                            circular={true}
                            cursor="true"
                            maxheight="80px"
                            maxwidth="80px"
                            onClick={[Function]}
                            size="tiny"
                            src="test"
                          >
                            <Image
                              as="img"
                              bordersize="4px"
                              circular={true}
                              className="sc-ifAKCX jpxJao"
                              cursor="true"
                              maxheight="80px"
                              maxwidth="80px"
                              onClick={[Function]}
                              size="tiny"
                              src="test"
                              ui={true}
                            >
                              <img
                                bordersize="4px"
                                className="ui tiny circular image sc-ifAKCX jpxJao"
                                cursor="true"
                                maxheight="80px"
                                maxwidth="80px"
                                onClick={[Function]}
                                src="test"
                              />
                            </Image>
                          </Styled(Image)>
                          <styled.span
                            textColor="white"
                            textFontFamily="Titillium Web"
                            textLineHeight="1"
                            textSize="18px"
                            textWeight="500"
                          >
                            <span
                              className="sc-EHOje epARVh"
                            >
                              test
                            </span>
                          </styled.span>
                        </div>
                      </styled.div>
                    </UserInfo>
                  </UserInfoContainers>
                </Connect(UserInfoContainers)>
                <Connect(SearchInput)>
                  <SearchInput
                    search={[Function]}
                  >
                    <Styled(Input)
                      icon="users"
                      iconPosition="left"
                      inputbgc="#485F78"
                      inputcolor="white"
                      inputwidth="100%"
                      onChange={[Function]}
                      placeholder="Search users ..."
                    >
                      <Input
                        className="sc-bZQynM bxBkOr"
                        icon="users"
                        iconPosition="left"
                        inputbgc="#485F78"
                        inputcolor="white"
                        inputwidth="100%"
                        onChange={[Function]}
                        placeholder="Search users ..."
                        type="text"
                      >
                        <div
                          className="ui left icon input sc-bZQynM bxBkOr"
                          inputbgc="#485F78"
                          inputcolor="white"
                          inputwidth="100%"
                        >
                          <input
                            onChange={[Function]}
                            placeholder="Search users ..."
                            type="text"
                          />
                          <Icon
                            as="i"
                            name="users"
                          >
                            <i
                              aria-hidden="true"
                              className="users icon"
                            />
                          </Icon>
                        </div>
                      </Input>
                    </Styled(Input)>
                  </SearchInput>
                </Connect(SearchInput)>
                <Connect(UserListContainer)>
                  <UserListContainer
                    addChat={[Function]}
                    availableUsers={Array []}
                    changeChat={[Function]}
                    chats={Object {}}
                    currentUser={
                      Object {
                        "avatar": "test",
                        "id": 1,
                        "name": "test",
                        "status": "offline",
                      }
                    }
                    readMessages={[Function]}
                  >
                    <ChatsList
                      changeChat={[Function]}
                      chats={Object {}}
                      currentUserId={1}
                      readMessages={[Function]}
                    >
                      <styled.div>
                        <div
                          className="sc-cSHVUG cliaFh"
                        />
                      </styled.div>
                    </ChatsList>
                    <ModalAddChat
                      addChat={[Function]}
                      currentUser={
                        Object {
                          "avatar": "test",
                          "id": 1,
                          "name": "test",
                          "status": "offline",
                        }
                      }
                      users={Array []}
                    >
                      <Modal
                        centered={true}
                        closeOnDimmerClick={true}
                        closeOnDocumentClick={false}
                        dimmer={true}
                        eventPool="Modal"
                        onClose={[Function]}
                        open={false}
                        trigger={
                          <Styled(Button)
                            color="black"
                            icon={true}
                            labelPosition="right"
                            onClick={[Function]}
                          >
                            Add User
                            <Icon
                              as="i"
                              name="add user"
                            />
                          </Styled(Button)>
                        }
                      >
                        <Portal
                          closeOnDocumentClick={false}
                          closeOnEscape={true}
                          eventPool="Modal"
                          mountNode={
                            <body
                              class="dimmable dimmed"
                            >
                              <div
                                class="ui page modals dimmer transition visible active"
                                style="display: flex;"
                              >
                                <div
                                  class="ui modal transition visible active"
                                >
                                  <div
                                    class="header"
                                  >
                                    Choice a character
                                  </div>
                                  <div
                                    class="content"
                                  >
                                    <div
                                      class="ui vertically divided five column grid"
                                    >
                                      <div
                                        class="row"
                                      />
                                    </div>
                                  </div>
                                </div>
                              </div>
                              <div
                                class="ui page modals dimmer transition visible active"
                                style="display: flex;"
                              >
                                <div
                                  class="ui modal transition visible active"
                                >
                                  <div
                                    class="header"
                                  >
                                    Choice a character
                                  </div>
                                  <div
                                    class="content"
                                  >
                                    <div
                                      class="ui vertically divided five column grid"
                                    >
                                      <div
                                        class="row"
                                      />
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </body>
                          }
                          onClose={[Function]}
                          onMount={[Function]}
                          onOpen={[Function]}
                          onUnmount={[Function]}
                          open={false}
                          openOnTriggerClick={true}
                          trigger={
                            <Styled(Button)
                              color="black"
                              icon={true}
                              labelPosition="right"
                              onClick={[Function]}
                            >
                              Add User
                              <Icon
                                as="i"
                                name="add user"
                              />
                            </Styled(Button)>
                          }
                        >
                          <Ref
                            innerRef={[Function]}
                            key="trigger"
                          >
                            <Styled(Button)
                              color="black"
                              icon={true}
                              labelPosition="right"
                              onBlur={[Function]}
                              onClick={[Function]}
                              onFocus={[Function]}
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                            >
                              <Button
                                as="button"
                                className="sc-htpNat hAnfKq"
                                color="black"
                                icon={true}
                                labelPosition="right"
                                onBlur={[Function]}
                                onClick={[Function]}
                                onFocus={[Function]}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                role="button"
                              >
                                <button
                                  className="ui black icon right labeled button sc-htpNat hAnfKq"
                                  onBlur={[Function]}
                                  onClick={[Function]}
                                  onFocus={[Function]}
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  role="button"
                                >
                                  Add User
                                  <Icon
                                    as="i"
                                    name="add user"
                                  >
                                    <i
                                      aria-hidden="true"
                                      className="add user icon"
                                    />
                                  </Icon>
                                </button>
                              </Button>
                            </Styled(Button)>
                          </Ref>
                        </Portal>
                      </Modal>
                    </ModalAddChat>
                  </UserListContainer>
                </Connect(UserListContainer)>
              </section>
            </styled.section>
          </SectionContacts>
          <Connect(ContactHeaderContainer)>
            <ContactHeaderContainer
              currentUser={
                Object {
                  "avatar": "test",
                  "id": 1,
                  "name": "test",
                  "status": "offline",
                }
              }
              deleteChat={[Function]}
              deleteMessages={[Function]}
              readMessages={[Function]}
              selectMessage={[Function]}
              selectedMessages={Array []}
            />
          </Connect(ContactHeaderContainer)>
          <Connect(TypingMessageContainer)>
            <TypingMessageContainer
              addMessage={[Function]}
              currentUser={
                Object {
                  "avatar": "test",
                  "id": 1,
                  "name": "test",
                  "status": "offline",
                }
              }
            />
          </Connect(TypingMessageContainer)>
        </div>
      </styled.div>
    </RootContainer>
  </Connect(RootContainer)>
</Provider>
`;
